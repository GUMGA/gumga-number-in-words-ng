{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/number-in-words.js"
  ],
  "names": [],
  "mappings": "AAAA;cCOA,mBAKI,6BACW,UAAA,MAAA,aACH,YAES,SAAA,SAAL,eACU,MAAR,mBAGF,UAAA,cAAiC,SAAA,OAQxB,GADL,GAAA,EAAA,EAAA,EACK,EAPD,KACA,OAAA,KAAA,OAAA,OAAA,SAAA,QAAA,OAAA,OAAA,OAAA,OAAA,MAAA,OAAA,OAAA,QAAA,WAAA,SAAA,YAAA,YAAA,UADK,aAEL,MAAA,QAAA,SAAA,WAAA,YAAA,WAAA,UAAA,UAFK,YAGL,MAAA,QAAA,WAAA,YAAA,eAAA,aAAA,aAAA,aAAA,aAHK,eAIL,MAAA,SAAA,SAAA,UAAA,aAAA,aAAA,YAAA,WAAA,WAAA,WAAA,WAAA,aAAA,aAAA,cAAA,iBAAA,eAAA,aAAA,iBAAA,cAJJ,gBAMgB,EAAI,KAAA,QAAa,EAAA,UAAb,MAAA,IAAA,MAApB,KAAwE,EAAxE,MAAmF,EAAnF,OAA+F,EAA/F,UACS,EAAI,EAAA,OAAR,EAAyB,GAAzB,EAAiC,KAAQ,KAAQ,EAAtD,KAA8D,GAA9D,EAAwE,KAAQ,QACtE,EAAA,IAAO,GAAE,IAAM,EAAP,KAAD,QAAA,GAAA,MAAb,MACM,GAAK,EAAI,EAAL,IAAA,OAAkB,EAAI,EAAL,QAAjB,GAAA,MAAJ,UAA0D,EAAI,EAAA,GAAS,EAAA,MAAA,EAAW,EAApB,OAAkC,EAAI,EAAI,EAAA,OAAJ,GAArG,GAAL,OAAuI,aAClI,GAAA,EAAQ,EAAI,EAAjB,SAA2B,EAA3B,EAAoC,EAApC,GAA4C,MAClC,EAAN,EAAU,EAAA,IAAW,WACrB,IAAA,KAAiB,GAAK,GAAA,GAAM,EAA5B,OACA,EAAA,IAAA,IAAgB,GAAK,GAAA,IAAO,EAAA,IAAA,IAAD,GAAN,IAAkC,EAAA,GAAS,EAAI,GAAA,GAAM,EAAnB,IADvD,OAEA,MAAQ,EAAA,IAAA,EAAgB,EAAF,IAAmD,GAAA,GAAM,EAAA,KAAN,GAAA,EAAlE,EAA4B,GAAA,GAAM,KAAA,EAAA,EAAe,EAAA,KAAlC,MAChB,EAAI,EAAA,EAAL,IAAA,EAAuB,KAAO,EAAA,GAAS,EAAT,EAAiB,GAAA,GAAA,GAAA,QAAA,KAAjB,OAAiD,GAAA,GAA/E,IADL,OAGO,EAAN,OAAA,GAAuB,EAAI,EAAJ,MAAa,EAAA,KAAA,KAAA,EAApC,GAA2D,EAAA,KAAA,OAAgB,GAAO,EAAA,EAAE,EAAF,GAAP,GAA4B,EAA7B,OAAA,GAA8C,GAAA,GAA7H,OACK,EAAA,KAAO,GAAK,EAAK,KAAO,EAAA,EAAA,KAAA,IAAA,EAAqB,EAAI,EAAJ,KAAe,SAAA,KAAc,EAAd,IAAA,MAAD,IAAqC,EAAA,QAAA,IAAxE,MAA+F,EAAA,EAA3G,GAAjB,WAEG,GAAA,KAAP,IAEG,MAAA,cAAP,+BAjCZ,mBAsCA,OAAA,0BAAA,OAAA,qBAAA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\n * Escreve números com até 63 dígitos por extenso, em Português. Também suporta números em formato moeda utilizando a virgula (,) como separador decimal.\n * Criado: 2005.12.06 - Modificado 2009.07.04\n * Carlos R. L. Rodrigues @ http://jsfromhell.com/string/extenso [rev. #3]\n *\n * Convertido para filter AngularJS para Gumga Components\n */\n(function() {\n    'use strict';\n\n    NumberInWordsFilter.$inject = [];\n\n    function NumberInWordsFilter() {\n        return (value, currency) => {\n            if (value) {\n\n                if (!angular.isString(value)){\n                  value = value.toString();\n                }\n\n                String.prototype.numberInWords = function (c) {\n                    var ex = [\n                        [\"zero\", \"um\", \"dois\", \"três\", \"quatro\", \"cinco\", \"seis\", \"sete\", \"oito\", \"nove\", \"dez\", \"onze\", \"doze\", \"treze\", \"quatorze\", \"quinze\", \"dezesseis\", \"dezessete\", \"dezoito\", \"dezenove\"],\n                        [\"dez\", \"vinte\", \"trinta\", \"quarenta\", \"cinquenta\", \"sessenta\", \"setenta\", \"oitenta\", \"noventa\"],\n                        [\"cem\", \"cento\", \"duzentos\", \"trezentos\", \"quatrocentos\", \"quinhentos\", \"seiscentos\", \"setecentos\", \"oitocentos\", \"novecentos\"],\n                        [\"mil\", \"milhão\", \"bilhão\", \"trilhão\", \"quadrilhão\", \"quintilhão\", \"sextilhão\", \"setilhão\", \"octilhão\", \"nonilhão\", \"decilhão\", \"undecilhão\", \"dodecilhão\", \"tredecilhão\", \"quatrodecilhão\", \"quindecilhão\", \"sedecilhão\", \"septendecilhão\", \"octencilhão\", \"nonencilhão\"]\n                    ];\n                    var a, n, v, i, n = this.replace(c ? /[^,\\d]/g : /\\D/g, \"\").split(\",\"), e = \" e \", $ = \"real\", d = \"centavo\", sl;\n                    for (var f = n.length - 1, l, j = -1, r = [], s = [], t = \"\"; ++j <= f; s = []) {\n                        j && (n[j] = ((\".\" + n[j]) * 1).toFixed(2).slice(2));\n                        if (!(a = (v = n[j]).slice((l = v.length) % 3).match(/\\d{3}/g), v = l % 3 ? [v.slice(0, l % 3)] : [], v = a ? v.concat(a) : v).length) continue;\n                        for (a = -1, l = v.length; ++a < l; t = \"\") {\n                            if (!(i = v[a] * 1)) continue;\n                            i % 100 < 20 && (t += ex[0][i % 100]) ||\n                            i % 100 + 1 && (t += ex[1][(i % 100 / 10 >> 0) - 1] + (i % 10 ? e + ex[0][i % 10] : \"\"));\n                            s.push((i < 100 ? t : !(i % 100) ? ex[2][i == 100 ? 0 : i / 100 >> 0] : (ex[2][i / 100 >> 0] + e + t)) +\n                                ((t = l - a - 2) > -1 ? \" \" + (i > 1 && t > 0 ? ex[3][t].replace(\"?o\", \"?es\") : ex[3][t]) : \"\"));\n                        }\n                        a = ((sl = s.length) > 1 ? (a = s.pop(), s.join(\" \") + e + a) : s.join(\"\") || ((!j && (n[j + 1] * 1 > 0) || r.length) ? \"\" : ex[0][0]));\n                        a && r.push(a + (c ? (\" \" + (v.join(\"\") * 1 > 1 ? j ? d + \"s\" : (/0{6,}$/.test(n[0]) ? \"de \" : \"\") + $.replace(\"l\", \"is\") : j ? d : $)) : \"\"));\n                    }\n                    return r.join(e);\n                }\n                return value.numberInWords(currency)\n            }\n        }\n    }\n\n    angular.module('gumga.numberinwords', [])\n        .filter('gumgaNumberInWords', NumberInWordsFilter);\n})()\n"
  ]
}