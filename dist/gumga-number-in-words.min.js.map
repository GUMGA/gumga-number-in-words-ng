{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/number-in-words.js"
  ],
  "names": [
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "require",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "NumberInWordsFilter",
    "value",
    "currency",
    "angular",
    "isString",
    "toString",
    "String",
    "prototype",
    "numberInWords",
    "c",
    "v",
    "ex",
    "this",
    "replace",
    "split",
    "$",
    "d",
    "j",
    "toFixed",
    "slice",
    "match",
    "concat",
    "push",
    "pop",
    "join",
    "test",
    "$inject",
    "filter"
  ],
  "mappings": "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",
  "file": "gumga-number-in-words.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\n * Escreve números com até 63 dígitos por extenso, em Português. Também suporta números em formato moeda utilizando a virgula (,) como separador decimal.\n * Criado: 2005.12.06 - Modificado 2009.07.04\n * Carlos R. L. Rodrigues @ http://jsfromhell.com/string/extenso [rev. #3]\n *\n * Convertido para filter AngularJS para Gumga Components\n */\n(function() {\n    'use strict';\n\n    NumberInWordsFilter.$inject = [];\n\n    function NumberInWordsFilter() {\n        return (value, currency) => {\n            if (value) {\n\n                if (!angular.isString(value)){\n                  value = value.toString();\n                }\n\n                String.prototype.numberInWords = function (c) {\n                    var ex = [\n                        [\"zero\", \"um\", \"dois\", \"três\", \"quatro\", \"cinco\", \"seis\", \"sete\", \"oito\", \"nove\", \"dez\", \"onze\", \"doze\", \"treze\", \"quatorze\", \"quinze\", \"dezesseis\", \"dezessete\", \"dezoito\", \"dezenove\"],\n                        [\"dez\", \"vinte\", \"trinta\", \"quarenta\", \"cinquenta\", \"sessenta\", \"setenta\", \"oitenta\", \"noventa\"],\n                        [\"cem\", \"cento\", \"duzentos\", \"trezentos\", \"quatrocentos\", \"quinhentos\", \"seiscentos\", \"setecentos\", \"oitocentos\", \"novecentos\"],\n                        [\"mil\", \"milhão\", \"bilhão\", \"trilhão\", \"quadrilhão\", \"quintilhão\", \"sextilhão\", \"setilhão\", \"octilhão\", \"nonilhão\", \"decilhão\", \"undecilhão\", \"dodecilhão\", \"tredecilhão\", \"quatrodecilhão\", \"quindecilhão\", \"sedecilhão\", \"septendecilhão\", \"octencilhão\", \"nonencilhão\"]\n                    ];\n                    var a, n, v, i, n = this.replace(c ? /[^,\\d]/g : /\\D/g, \"\").split(\",\"), e = \" e \", $ = \"real\", d = \"centavo\", sl;\n                    for (var f = n.length - 1, l, j = -1, r = [], s = [], t = \"\"; ++j <= f; s = []) {\n                        j && (n[j] = ((\".\" + n[j]) * 1).toFixed(2).slice(2));\n                        if (!(a = (v = n[j]).slice((l = v.length) % 3).match(/\\d{3}/g), v = l % 3 ? [v.slice(0, l % 3)] : [], v = a ? v.concat(a) : v).length) continue;\n                        for (a = -1, l = v.length; ++a < l; t = \"\") {\n                            if (!(i = v[a] * 1)) continue;\n                            i % 100 < 20 && (t += ex[0][i % 100]) ||\n                            i % 100 + 1 && (t += ex[1][(i % 100 / 10 >> 0) - 1] + (i % 10 ? e + ex[0][i % 10] : \"\"));\n                            s.push((i < 100 ? t : !(i % 100) ? ex[2][i == 100 ? 0 : i / 100 >> 0] : (ex[2][i / 100 >> 0] + e + t)) +\n                                ((t = l - a - 2) > -1 ? \" \" + (i > 1 && t > 0 ? ex[3][t].replace(\"?o\", \"?es\") : ex[3][t]) : \"\"));\n                        }\n                        a = ((sl = s.length) > 1 ? (a = s.pop(), s.join(\" \") + e + a) : s.join(\"\") || ((!j && (n[j + 1] * 1 > 0) || r.length) ? \"\" : ex[0][0]));\n                        a && r.push(a + (c ? (\" \" + (v.join(\"\") * 1 > 1 ? j ? d + \"s\" : (/0{6,}$/.test(n[0]) ? \"de \" : \"\") + $.replace(\"l\", \"is\") : j ? d : $)) : \"\"));\n                    }\n                    return r.join(e);\n                }\n                return value.numberInWords(currency)\n            }\n        }\n    }\n\n    angular.module('gumga.numberinwords', [])\n        .filter('gumgaNumberInWords', NumberInWordsFilter);\n})()\n"
  ]
}